import React, {useEffect, useRef, useState} from "react";
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import 'leaflet.markercluster/dist/MarkerCluster.css';
import 'leaflet.markercluster/dist/MarkerCluster.Default.css';
import 'leaflet.markercluster';
import 'leaflet/dist/leaflet.css';
import 'leaflet.locatecontrol';
import markerIcon from './images/marker-icon.png';
import markerIcon2x from './images/marker-icon-2x.png';
import jsonData from './geoJson.json';
import kzJson from './data/country_boundary.geojson'
import kostanayJson from './data/kostanay.geojson'
import villagesJson from './data/villages.geojson'
import regionsJson from './data/regions.geojson'
import didarsJson from './data/output.geojson'

import styles from './map.module.css'


import EventCardMap from "../event/event_card_map/EventCardMap";
import ContentDrawer from "../../shared/ui/content_drawer/ContentDrawer";


import 'leaflet-simple-map-screenshoter';

// import {MapContainer, Marker, Popup, TileLayer} from "react-leaflet";

const InfoCard = ({data= {}, onClose=f=>f}) => {
    const objProps = Object.entries(data);

    return (<>
        {/*<div className={styles.infocard} id={'info'}>*/}
        {/*    <div className={styles.infocard__header}>*/}
        {/*        <div className={styles.infocard__close} onClick={onClose}>X</div>*/}
        {/*    </div>*/}
            <div className="infocard__body">
                <h2>{data['display_name']}</h2>
                {objProps.map(([key, value]) => (
                    <>
                        <tr className={styles.infocard__tr}><td className={styles.infocard__td}>{key}</td><td className={styles.infocard__td}>{value}</td></tr>
                        {/*<strong>:</strong> <br/>*/}
                    </>
                ))}

            </div>
        {/*</div>*/}
    </>)
}

export default function Leaflet({markersData}) {
    const eventsInfo = {
        caption: '–ú–∏—Ç–∞–ø –¥–ª—è QA –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –æ—Ç KoronaPay',
        description: `üåü Meetup: "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ WebGL"
‚†Ä
üîç –•–æ—á–µ—à—å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ–±–µ? –¢–æ–≥–¥–∞ —ç—Ç–æ—Ç –º–∏—Ç–∞–ø –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ —É–∑–Ω–∞–π –≤—Å–µ –æ–± –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ WebGL.
‚†Ä
üéô–≠–∫—Å–ø–µ—Ä—Ç –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ ‚Äì –†–æ–º–∞–Ω –ë–∞—à–∞—Ä–∏–Ω –ø–æ–¥–µ–ª–∏—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è WebGL –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏–∑ —Å—Ñ–µ—Ä—ã drug research.
‚†Ä
–†–æ–º–∞–Ω —É–∂–µ –±–æ–ª–µ–µ 10 –ª–µ—Ç –≤ IT, —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –¥–µ—Å—è—Ç–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ —Å—Ñ–µ—Ä–∞—Ö –æ—Ç e-commerce –¥–æ —Ñ–æ–Ω–¥–æ–≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù–∞–ø–∏—Å–∞–ª 5 —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ—Å—Ç–∏–≥ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è –∏ –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ.
‚†Ä
üè¢ Quantori ‚Äî –≤–µ–¥—É—â–∞—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è IT-–∫–æ–º–ø–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –±–∏–æ–ª–æ–≥–∏–∏, —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø—Ä–∏–º–µ–Ω—è—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –Ω–∞—É—á–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É.
‚†Ä
–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å —É–∑–Ω–∞—Ç—å –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ web, –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å 3D –∏ WebGL, –∞ —Ç–∞–∫–∂–µ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä Life Science —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
‚†Ä
‚ùóÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ –º–∏—Ç–∞–ø –ø–æ —Å—Å—ã–ª–∫–µ https://forms.amocrm.ru/rrdwvxm`,
        start_date: '21 —Å–µ–Ω—Ç—è–±—Ä—è',
        address: "Astana Hub (–ê—Å—Ç–∞–Ω–∞, –ø—Ä-—Ç. –ú–∞–Ω–≥–∏–ª–∏–∫ –ï–ª. 55/8, –ø–∞–≤–∏–ª—å–æ–Ω –°4.6), –∑–∞–ª Event hall",
        end_date: '31 –æ–∫—Ç—è–±—Ä—è',
        registration_deadline: '',
        cost: null
    }

    const geoPosition = [53.214496, 63.632100]
    const mapContainerRef = useRef();
    const [selectedEvent, setSelectedEvent] = useState(null);
    const [infoCard, setInfoCard] = useState(null)

    // Create additional Control placeholders
    function addControlPlaceholders(map) {
        let corners = map._controlCorners,
            l = 'leaflet-',
            container = map._controlContainer;
        function createCorner(vSide, hSide) {
            let className = l + vSide + ' ' + l + hSide;
            corners[vSide + hSide] = L.DomUtil.create('div', className, container);
        }
        createCorner('verticalcenter', 'left');
        createCorner('verticalcenter', 'right');
    }
    useEffect(() => {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –º–∞—Å—à—Ç–∞–±–∞
        const map = L.map(mapContainerRef.current).setView(geoPosition, 7);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–ª–æ–≤–æ–≥–æ —Å–ª–æ—è OpenStreetMap
        // L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        //     attribution: 'Map data &copy; OpenStreetMap contributors',
        // }).addTo(map);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: false,
        }).addTo(map);

        addControlPlaceholders(map);
        // Change the position of the Zoom Control to a newly created placeholder.
        map.zoomControl.setPosition('verticalcenterright');
        // You can also put other controls in the same placeholder.
        L.control.scale({position: 'bottomleft'}).addTo(map);

        // Add the geolocation control
        L.control
            .locate({
                position: 'topright',
                locateOptions: {
                    enableHighAccuracy: true,
                },
                markerStyle: {
                    draggable: true,
                    opacity: 0.5,
                },
                circleStyle: {
                    radius: 200,
                    weight: 2,
                    color: 'blue',
                    fillColor: 'blue',
                    fillOpacity: 0.1,
                },
            })
            .addTo(map);


        L.simpleMapScreenshoter().addTo(map)
        // // Load your local GeoJSON file here
        // fetch(kzJson)
        //     .then((response) => response.json())
        //     .then((data) => {
        //         setGeojsonData(data);
        //     });

        // Function to handle click events on each polygon feature
        function onEachFeature(feature, layer) {
            layer.on('click', function (e) {

                displayPolygonProps(feature.properties);
            });
        }

        // Function to display polygon properties in the 'info' div
        function displayPolygonProps(props) {
            setInfoCard(props)
            setIsContentDrawerActive(true)
        }

        // let kzjsonLayer = L.geoJSON(kzJson, {
        //     onEachFeature: onEachFeature
        // }).addTo(map); // –î–æ–±–∞–≤–ª—è–µ–º GeoJSON —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç—É
        // let kostjsonLayer = L.geoJSON(kostanayJson, {
        //     onEachFeature: onEachFeature
        // }).addTo(map); // –î–æ–±–∞–≤–ª—è–µ–º GeoJSON —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç—É

        // let regionsjsonLayer = L.geoJSON(regionsJson, {
        //     onEachFeature: onEachFeature
        // }).addTo(map); // –î–æ–±–∞–≤–ª—è–µ–º GeoJSON —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç—É
        // map.fitBounds(kzjsonLayer.getBounds());


        // Create a marker cluster group
        const markers = L.markerClusterGroup();


        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞
        const customIcon = L.icon({
            iconUrl: markerIcon,
            iconRetinaUrl: markerIcon2x,
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            tooltipAnchor: [16, -28],
            shadowUrl: null,
            shadowSize: null,
            shadowAnchor: null,
        });

        markersData.forEach((markerData) => {
            const { caption, coordinates } = markerData;
            const marker = L.marker(coordinates, {icon: customIcon}).bindPopup(caption);

            marker.on('click', () => {
                // Handle the click event here
                setSelectedEvent(markerData)
                console.log('Marker clicked:', caption);
            });

            markers.addLayer(marker);
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è GeoJSON –≤ —Å–ª–æ–π —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        // markers.addLayer(geojsonLayer);
        // Add markers to the cluster group
        // const marker1 = L.marker([51.5, -0.09]).bindPopup('Marker 1');
        // const marker2 = L.marker([51.51, -0.1]).bindPopup('Marker 2');
        // const marker3 = L.marker([51.49, -0.08]).bindPopup('Marker 3');
        // markers.addLayers([marker1, marker2, marker3]);

        // Add the marker cluster group to the map
        // map.addLayer(markers);


        // *****
        let villagesMarkers = L.markerClusterGroup();
        L.geoJSON(villagesJson, {
            pointToLayer: function (feature, latlng) {
                let marker = L.marker(latlng, {icon: customIcon});

                marker.on('click', function () {
                    // Access the properties of the GeoJSON feature
                    let properties = feature.properties;

                    // Create a popup with the feature properties
                    let popupContent = "<b>Name:</b> " + properties.name + "<br>" +
                        "<b>Description:</b> " + properties.description;

                    // Bind the popup to the marker and open it
                    marker.bindPopup(popupContent).openPopup();

                    setInfoCard(properties)
                    setIsContentDrawerActive(true)
                });

                // Add the marker to the MarkerClusterGroup
                villagesMarkers.addLayer(marker);
                return marker;
            },
            onEachFeature: function (feature, layer) {
                if (feature.properties && feature.properties.popupContent) {
                    layer.bindPopup(feature.properties.popupContent);
                }
            }
        })
        // .addTo(villagesMarkers);
        // Add the MarkerClusterGroup to the map
        // map.addLayer(villagesMarkers);
        //  !!!******!!!



        // *****
        let didarMarkers = L.markerClusterGroup();
        L.geoJSON(didarsJson, {
            pointToLayer: function (feature, latlng) {
                let marker = L.marker(latlng, {icon: customIcon});

                marker.on('click', function () {
                    // Access the properties of the GeoJSON feature
                    let properties = feature.properties;

                    // Create a popup with the feature properties
                    let popupContent = "<b>Name:</b> " + properties.name + "<br>" +
                        "<b>Description:</b> " + properties.description;

                    // Bind the popup to the marker and open it
                    marker.bindPopup(popupContent).openPopup();

                    setInfoCard(properties)
                    setIsContentDrawerActive(true)
                });

                // Add the marker to the MarkerClusterGroup
                marker.addTo(map)
                // didarMarkers.addLayer(marker);
                return marker;
            },
            onEachFeature: function (feature, layer) {
                if (feature.properties && feature.properties.popupContent) {
                    layer.bindPopup(feature.properties.popupContent);
                }
            }
        })
        // .addTo(villagesMarkers);
        // Add the MarkerClusterGroup to the map
        // map.addLayer(didarMarkers);
        //  !!!******!!!


        // map.addLayer(markers);
        // console.log("valueNames", valueNames);
        return () => {
            // –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            map.remove();
        };
    }, []);

    const [isContentDrawerActive, setIsContentDrawerActive] = useState(false);
    const [isLayerDrawerActive, setIsLayerDrawerActive] = useState(false);

    return (<div style={{display:'flex',height: '100%'}}>
        <ContentDrawer isExpand={isLayerDrawerActive} onClose={() => setIsLayerDrawerActive(false)} Body={infoCard && <InfoCard />} />

        <div ref={mapContainerRef} style={{ width: '100%', height: '100%' }}></div>
        {selectedEvent && <EventCardMap item={selectedEvent} />}

        {/*{infoCard && <InfoCard data={infoCard} onClose={() => setInfoCard(null)} /> }*/}
        <ContentDrawer isExpand={isContentDrawerActive} onClose={() => setIsContentDrawerActive(false)} Body={infoCard && <InfoCard data={infoCard}/>} />
    </div>)
}
